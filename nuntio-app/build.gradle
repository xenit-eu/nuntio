plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'java'
    id 'eu.xenit.docker' version '5.3.0'
    id 'eu.xenit.docker-compose' version '5.3.0'
    id 'be.vbgn.ci-detect' version '0.5.0'
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    compileOnly 'org.projectlombok:lombok:1.18.20'

    implementation platform(project(':nuntio-bom'))
    implementation project(':nuntio-integration')
    implementation project(':nuntio-platform-docker')
    implementation project(':nuntio-registry-consul')
    implementation project(':nuntio-registry-fake')
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    testImplementation platform('org.testcontainers:testcontainers-bom:1.16.0')
    testImplementation 'org.testcontainers:junit-jupiter'
}

createDockerFile {
    from("docker.io/xenit/openjdk:jdk-11")
    smartCopy(bootJar.archiveFile.map({ it.asFile }), "/nuntio.jar")
    dependsOn(bootJar)
    entryPoint("/docker-entrypoint.sh", "java", '$JAVA_OPTS', "-jar", "/nuntio.jar")
    exposePort(8080)
    instruction("HEALTHCHECK --timeout=3s CMD curl --fail --silent http://localhost:8080/actuator/health || exit 1")
}

dockerCompose {
    useComposeFiles = [
            'src/test/resources/docker-compose.yml'
    ] + (ci.isCi()?[]: [
            'src/test/resources/docker-compose-debug.yml'
    ])
}
