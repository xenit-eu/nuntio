import java.text.SimpleDateFormat
import java.util.stream.Collectors

plugins {
    id 'org.springframework.boot' version '2.6.1'
    id 'java'
    id 'eu.xenit.docker' version '5.3.0'
    id 'eu.xenit.docker-compose' version '5.3.0'
    id 'be.vbgn.ci-detect' version '0.5.0'
    id 'application'
}

dependencies {
    implementation project(':nuntio-integration')
    implementation project(':nuntio-platform-docker')
    implementation project(':nuntio-platform-fake')
    implementation project(':nuntio-registry-consul')
    implementation project(':nuntio-registry-fake')
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.micrometer:micrometer-registry-prometheus'


    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'

    testImplementation platform('org.testcontainers:testcontainers-bom:1.16.0')
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'com.ecwid.consul:consul-api:1.4.5'
    testImplementation platform('com.github.docker-java:docker-java-bom:3.2.12')
    testImplementation 'com.github.docker-java:docker-java-core'
    testImplementation 'com.github.docker-java:docker-java-transport-httpclient5'
    testImplementation 'org.awaitility:awaitility:4.1.1'
}

createDockerFile {
    from("docker.io/library/eclipse-temurin:11-jre")
    dependsOn(installBootDist)
    smartCopy(installBootDist.destinationDir, "/opt/nuntio")
    runCommand("chmod +x /opt/nuntio/bin/nuntio-app")
    entryPoint("/opt/nuntio/bin/nuntio-app")
    exposePort(8080)
    instruction("HEALTHCHECK --timeout=3s CMD curl --fail --silent http://localhost:8080/actuator/health/liveness || exit 1")
    environmentVariable("JAVA_OPTS", "-Xmx500M -XX:+CrashOnOutOfMemoryError")
}

dockerBuild {
    repositories = ["docker.io/xenit/nuntio"]
    tags.add(project.provider({ "${project.version}" }))
    tags.addAll(project.provider({
        if("${project.version}".endsWith('-SNAPSHOT')) {
            def dateString = new SimpleDateFormat("yyyyMMdd'-'hhmmss").format(new Date()) ;
            return [
                "${project.version}-${dateString}",
                "development",
                "development-${dateString}"
            ]
        }
        return ["latest"]
    }))
}


test {
    useJUnitPlatform()
    dependsOn(tasks.buildDockerImage)
    systemProperty("nuntio.image", buildDockerImage.images.forUseAtConfigurationTime().get()[0])
}

test.shouldRunAfter(
        ['api', 'engine', 'integration', 'platform-docker', 'platform-fake', 'registry-consul', 'registry-fake'].stream()
        .map({ ':nuntio-'+it + ':check'})
        .collect(Collectors.toList())
)


if(ci.isCi()) {
    docker {
        registryCredentials {
            username = System.getenv("DOCKER_USER")
            password = System.getenv("DOCKER_PASSWORD")
        }
    }
}