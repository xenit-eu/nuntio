import org.gradle.api.tasks.testing.Test

import java.util.stream.Collectors

plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'java'
    id 'eu.xenit.docker' version '5.3.0'
    id 'be.vbgn.ci-detect' version '0.5.0'
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    compileOnly 'org.projectlombok:lombok:1.18.20'

    implementation platform(project(':nuntio-bom'))
    implementation project(':nuntio-integration')
    implementation project(':nuntio-platform-docker')
    implementation project(':nuntio-registry-consul')
    implementation project(':nuntio-registry-fake')
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.micrometer:micrometer-registry-prometheus'


    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'

    testImplementation platform('org.testcontainers:testcontainers-bom:1.16.0')
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation platform('org.junit:junit-bom:5.8.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'com.ecwid.consul:consul-api:1.4.5'
    testImplementation platform('com.github.docker-java:docker-java-bom:3.2.12')
    testImplementation 'com.github.docker-java:docker-java-core'
    testImplementation 'com.github.docker-java:docker-java-transport-httpclient5'
    testImplementation 'org.awaitility:awaitility:4.1.1'
}

createDockerFile {
    from("docker.io/xenit/openjdk:jdk-11")
    smartCopy(bootJar.archiveFile.map({ it.asFile }), "/nuntio.jar")
    dependsOn(bootJar)
    entryPoint("/docker-entrypoint.sh", "java", '$JAVA_OPTS', "-jar", "/nuntio.jar")
    exposePort(8080)
    instruction("HEALTHCHECK --timeout=3s CMD curl --fail --silent http://localhost:8080/actuator/health || exit 1")
}

dockerBuild {
    repositories = ["hub.xenit.eu/public/nuntio", "docker.io/xenit/nuntio"]
    tags = ["latest"]
}


test {
    useJUnitPlatform()
    dependsOn(tasks.buildDockerImage)
    if(!ci.isCi()) {
        systemProperty("dind.root", project.layout.buildDirectory.dir("dind-temp").forUseAtConfigurationTime().map(dir -> dir.asFile.absolutePath).get())
    }
}

test.shouldRunAfter(
        ['api', 'engine', 'integration', 'platform-docker', 'platform-fake', 'registry-consul', 'registry-fake'].stream()
        .map({ ':nuntio-'+it + ':check'})
        .collect(Collectors.toList())
)

